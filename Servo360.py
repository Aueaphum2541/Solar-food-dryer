import streamlit as st
import serial
import time
import serial.tools.list_ports
from streamlit_autorefresh import st_autorefresh

# ---------- Config --------------------------------------------------------
st.set_page_config("Servo 2 Toggle Controller", "üîÅ", layout="centered")
st.title("üîÅ Servo 2 Controller")

# ---------- Session state -------------------------------------------------
if "serial" not in st.session_state:
    st.session_state.serial = None
if "toggle_timer_active" not in st.session_state:
    st.session_state.toggle_timer_active = False
if "toggle_timer_end" not in st.session_state:
    st.session_state.toggle_timer_end = 0

# ---------- Serial port selection -----------------------------------------
def list_serial_ports():
    ports = serial.tools.list_ports.comports()
    return [port.device for port in ports]

available_ports = list_serial_ports()
SERIAL_PORT = st.selectbox("Serial Port", available_ports)
BAUD_RATE = st.selectbox("Baud Rate", [9600, 19200, 38400, 57600, 115200], index=0)

col1, col2 = st.columns(2)
if col1.button("Connect", disabled=st.session_state.serial is not None):
    try:
        ser = serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=1)
        st.session_state.serial = ser
        time.sleep(2)
        st.success("‚úÖ Connected to Arduino")
    except Exception as e:
        st.error(f"‚ùå Error: {e}")

if col2.button("Disconnect", disabled=st.session_state.serial is None):
    if st.session_state.serial:
        st.session_state.serial.close()
        st.session_state.serial = None
        st.warning("üîå Disconnected")

st.divider()

# ---------- Toggle button -------------------------------------------------
if st.session_state.serial:
    if st.button("üîÅ ‡∏´‡∏°‡∏∏‡∏ô Servo 2 (TOGGLE ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ)"):
        st.session_state.serial.write(b"TOGGLE\n")
        st.toast("‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á TOGGLE ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

    st.divider()

    # ---------- Timer-based toggle ---------------------------------------
    with st.expander("‚è≤Ô∏è ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠ TOGGLE"):
        colh, colm, cols = st.columns(3)
        h = colh.number_input("‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á", min_value=0, max_value=23, value=0)
        m = colm.number_input("‡∏ô‡∏≤‡∏ó‡∏µ",   min_value=0, max_value=59, value=0)
        s = cols.number_input("‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ", min_value=0, max_value=59, value=10)

        total_seconds = h * 3600 + m * 60 + s

        if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ TOGGLE"):
            if st.session_state.toggle_timer_active:
                st.warning("‚è≥ Timer ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà")
            elif total_seconds <= 0:
                st.warning("‚è±Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")
            else:
                st.session_state.toggle_timer_active = True
                st.session_state.toggle_timer_end = time.time() + total_seconds
                st.success(f"üïí ‡∏à‡∏∞‡∏™‡πà‡∏á TOGGLE ‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å {total_seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

        # ‚úÖ Refresh ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 500 ms ‡∏Ç‡∏ì‡∏∞ countdown
        if st.session_state.toggle_timer_active:
            st_autorefresh(interval=500, key="auto_refresh")

            remaining = int(st.session_state.toggle_timer_end - time.time())
            if remaining <= 0:
                st.session_state.serial.write(b"TOGGLE\n")
                st.toast("‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á TOGGLE ‡πÅ‡∏•‡πâ‡∏ß (‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤)")
                st.session_state.toggle_timer_active = False
                st.rerun()
            else:
                st.metric("‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤", f"{remaining} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
